;;; Compiled snippets and support files for `nix-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'nix-mode
                     '(("__shell.nix" "{ pkgs ? import <nixpkgs> {} }:\n\nwith pkgs;\n\nmkShell {\n  buildInputs = [\n    ${0:`%`}\n  ];\n}" "__shell.nix" nil nil nil "/home/camus/.doom.d/templates/nix-mode/__shell.nix" nil nil)
                       ("__flake.nix" "# ============================================================================ #\n#\n#\n#\n# ---------------------------------------------------------------------------- #\n\n{\n\n# ---------------------------------------------------------------------------- #\n\n  outputs = { nixpkgs, ... }: let\n\n# ---------------------------------------------------------------------------- #\n\n    projectName = \"`(file-name-nondirectory (file-name-directory buffer-file-name))`\";\n\n# ---------------------------------------------------------------------------- #\n\n    eachSupportedSystemMap = f: let\n      supportedSystems = [\n        \"x86_64-linux\"  \"aarch64-linux\"  \"i686-linux\"\n        \"x86_64-darwin\" \"aarch64-darwin\"\n      ];\n      proc = system: { name = system; value = f system; };\n    in builtins.listToAttrs ( map proc supportedSystems );\n\n\n# ---------------------------------------------------------------------------- #\n\n    overlays.default = overlays.\\${projectName};\n    overlays.\\${projectName} = final: prev: {\n      \\${projectName} = prev.emptyFile;\n    };\n\n\n# ---------------------------------------------------------------------------- #\n\n    legacyPackages = eachSupportedSystemMap ( system: let\n      pkgsFor = nixpkgs.legacyPackages.\\${system}.extend overlays.default;\n    in {\n      \\${projectName} = pkgsFor.\\${projectName};\n    } );\n\n\n# ---------------------------------------------------------------------------- #\n\n    packages = eachSupportedSystemMap ( system: let\n      pkgsFor = nixpkgs.legacyPackages.\\${system}.extend overlays.default;\n    in {\n      default         = pkgsFor.\\${projectName};\n      \\${projectName} = pkgsFor.\\${projectName};\n    } );\n\n\n# ---------------------------------------------------------------------------- #\n\n    devShells = eachSupportedSystemMap ( system: let\n      pkgsFor = nixpkgs.legacyPackages.\\${system}.extend overlays.default;\n      default = pkgsFor.mkShell {\n        inputsFrom = [pkgsFor.\\${projectName}];\n        packages   = [];\n        shellHook  = ''\n          echo 'Happy Hacking!' >&2;\n        '';\n      };\n    in {\n      inherit default;\n      \\${projectName} = default;\n    } );\n\n\n# ---------------------------------------------------------------------------- #\n\n  in {  # Begin `outputs'\n\n    inherit overlays legacyPackages packages devShells;\n\n    nixosModules = { config.nixpkgs.overlays = overlays.default; };\n\n  };  # End `outputs'\n\n\n# ---------------------------------------------------------------------------- #\n\n}\n\n\n# ---------------------------------------------------------------------------- #\n#\n#\n#\n# ============================================================================ #\n" "__flake.nix" nil
                        ("file templates")
                        nil "/home/camus/.doom.d/templates/nix-mode/__flake.nix" nil nil)
                       ("__" "# ============================================================================ #\n#\n#\n#\n# ---------------------------------------------------------------------------- #\n\n{ lib }: let\n\n# ---------------------------------------------------------------------------- #\n\n$0\n\n\n# ---------------------------------------------------------------------------- #\n\nin {\n\n}\n\n\n# ---------------------------------------------------------------------------- #\n#\n#\n#\n# ============================================================================ #" "__" nil
                        ("file templates")
                        nil "/home/camus/.doom.d/templates/nix-mode/__" nil nil)))


;;; Do not edit! File generated at Mon Mar 20 17:06:16 2023
