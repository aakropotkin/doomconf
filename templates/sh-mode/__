#! /usr/bin/env `(if (equal (file-name-extension buffer-file-name) "zsh") "zsh" "bash")`
# ============================================================================ #
#
#
#
# ---------------------------------------------------------------------------- #

set -eu;
set -o pipefail;


# ---------------------------------------------------------------------------- #

_as_me="`(file-name-nondirectory buffer-file-name)`";

_version="0.1.0";

_usage_msg="USAGE: \$_as_me [OPTIONS...] $0

$1
";

_help_msg="\$_usage_msg
$2

OPTIONS
  -h,--help         Print help message to STDOUT.
  -u,--usage        Print usage message to STDOUT.
  -v,--version      Print version information to STDOUT.

ENVIRONMENT
  GREP              Command used as \\\`grep' executable.
  REALPATH          Command used as \\\`realpath' executable.
  MKTEMP            Command used as \\\`mktemp' executable.
";


# ---------------------------------------------------------------------------- #

usage() {
  if [[ "\${1:-}" = "-f" ]]; then
    echo "\$_help_msg";
  else
    echo "\$_usage_msg";
  fi
}


# ---------------------------------------------------------------------------- #

# @BEGIN_INJECT_UTILS@
: "\${GREP:=grep}";
: "\${REALPATH:=realpath}";
: "\${MKTEMP:=mktemp}";
$3
# @END_INJECT_UTILS@

# @BEGIN_INJECT_PATH@
`(if (equal (file-name-extension buffer-file-name) "zsh")
     "PATH=\"\${PATH:+\$PATH:}\${0:a:h}\";
if [[ -d \"\${0:a:h}/../libexec\" ]]; then
  PATH=\"\$PATH:\${0:a:h}/../libexec\";
fi"
     "PATH=\"\${PATH:+\$PATH:}\${BASH_SOURCE[0]%/*}\";
if [[ -d \"\${BASH_SOURCE[0]%/*}/../libexec\" ]]; then
  PATH=\"\$PATH:\${BASH_SOURCE[0]%/*}/../libexec\";
fi")`
export PATH;
# @END_INJECT_PATH@


# ---------------------------------------------------------------------------- #

_TMP_FILES='';
_TMP_DIRS='';
export _TMP_FILES _TMP_DIRS;


mktmp_auto() {
  local _tmp;
  _tmp="\$( \$MKTEMP "\$@"; )";
  case " \$* " in
    *\ -d\ *|*\ --directory\ *) export _TMP_DIRS="\$_TMP_DIRS:\$_tmp"; ;;
    *)                          export _TMP_FILES="\$_TMP_FILES:\$_tmp"; ;;
  esac
  echo "\$_f";
}


# ---------------------------------------------------------------------------- #

cleanup() {
  local _tmp_files _tmp_dirs;
  if [[ -n "\$_TMP_FILES" ]]; then
    IFS=':' read -r `(if (equal (file-name-extension buffer-file-name) "zsh")
                         "-A" "-a")` _tmp_files <<< "\$_TMP_FILES";
    rm -f "\${_tmp_files[@]}";
  fi
  if [[ -n "\$_TMP_DIRS" ]]; then
    IFS=':' read -r `(if (equal (file-name-extension buffer-file-name) "zsh")
                         "-A" "-a")` _tmp_dirs <<< "\$_TMP_DIRS";
    rm -rf "\${_tmp_dirs[@]}";
  fi
}

_es=0;
trap '_es="\$?"; cleanup; exit "\$_es";' HUP TERM INT QUIT EXIT;


# ---------------------------------------------------------------------------- #

while [[ "\$#" -gt 0 ]]; do
  case "\$1" in
    # Split short options such as \`-abc' -> \`-a -b -c'
    -[^-]?*)
      _arg="\$1";
      declare -a _args;
      _args=();
      shift;
      _i=1;
      while [[ "\$_i" -lt "\${#_arg}" ]]; do
        _args+=( "-\${_arg:\$_i:1}" );
        _i="\$(( _i + 1 ))";
      done
      set -- "\${_args[@]}" "\$@";
      unset _arg _args _i;
      continue;
    ;;
    --*=*)
      _arg="\$1";
      shift;
      set -- "\${_arg%%=*}" "\${_arg#*=}" "\$@";
      unset _arg;
      continue;
    ;;
    -u|--usage)    usage;    exit 0; ;;
    -h|--help)     usage -f; exit 0; ;;
    -v|--version)  echo "\$_version"; exit 0; ;;
    --) shift; break; ;;
    -?|--*)
      echo "\$_as_me: Unrecognized option: '\$1'" >&2;
      usage -f >&2;
      exit 1;
    ;;
    *)
      echo "\$_as_me: Unexpected argument(s) '\$*'" >&2;
      usage -f >&2;
      exit 1;
    ;;
  esac
  shift;
done


# ---------------------------------------------------------------------------- #

$4


# ---------------------------------------------------------------------------- #
#
#
#
# ============================================================================ #