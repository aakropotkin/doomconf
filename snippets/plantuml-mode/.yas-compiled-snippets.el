;;; Compiled snippets and support files for `plantuml-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'plantuml-mode
                     '(("while" "while (${1:condition}) is (${2:Yes})\n    $0\nendwhile" "while (...)" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/while" nil nil)
                       ("vertif" "!pragma useVerticalIf on\n" "!pragma useVerticalIf on" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/vertif" nil nil)
                       ("uml" "@startuml\n$0\n@enduml" "start and end uml" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/uml" nil nil)
                       ("u" "${1:Down} -up${3:-}> ${2:Up}\n" "Down -up-> Up" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/u" nil nil)
                       ("to" "${1:From} ${2:--} ${3:To}" "From - To" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/to" nil nil)
                       ("trigger-key" "${1:From} -[${2:hidden}]${4:-}> ${3:To}\n\n" "From -[attr]-> To" t nil nil "/home/camus/.doom.d/snippets/plantuml-mode/ta" nil nil)
                       ("trigger-key" "<style>\n    $0\n</style\n" "style tag" t nil nil "/home/camus/.doom.d/snippets/plantuml-mode/sty" nil nil)
                       ("storage" "storage ${1:Name} ${2:}{\n    $0\n}" "storage ... {...}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/storage" nil nil)
                       ("stack" "stack ${1:Name} ${2:}{\n    $0\n}\n" "stack ... {...}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/stack" nil nil)
                       ("st" "state ${1:Name} ${2:}{\n    $0\n}\n\n" "state ... {...}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/st" nil nil)
                       ("spla" "split again\n    $0\n" "split again" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/spla" nil nil)
                       ("spl" "split\n    $0\nend split\n" "split" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/spl" nil nil)
                       ("sp" "skinparam ${1:param} {\n    $0\n}\n" "skinparam" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/sp" nil nil)
                       ("sns" "set namespaceSeparator ${0:::}\n" "set namespaceSeparator ..." nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/sns" nil nil)
                       ("size" "<size:${1:}>$0</size>\n" "size tag" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/size" nil nil)
                       ("s16" "sprite $${1:Name} [16x16/16] {\nFFFFFFFFFFFFFFFF\nFFFFFFFFFFFFFFFF\nFFFFFFFFFFFFFFFF\nFFFFFFFFFFFFFFFF\nFFFFFFFFFFFFFFFF\nFFFFFFFFFFFFFFFF\nFFFFFFFFFFFFFFFF\nFFFFFFFFFFFFFFFF\nFFFFFFFFFFFFFFFF\nFFFFFFFFFFFFFFFF\nFFFFFFFFFFFFFFFF\nFFFFFFFFFFFFFFFF\nFFFFFFFFFFFFFFFF\nFFFFFFFFFFFFFFFF\nFFFFFFFFFFFFFFFF\nFFFFFFFFFFFFFFFF\n}\n" "16x16 sprite" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/s16" nil nil)
                       ("s" "{static} ${0:Name}\n" "static" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/s" nil nil)
                       ("repeat" "repeat\n    $0\nrepeat while (${1:condition}) is (${2:Yes})\n" "repeat while (...)" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/repeat" nil nil)
                       ("rect" "rectangle ${1:Name} ${2:}{\n    $0\n}\n" "rectangle ... {...}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/rect" nil nil)
                       ("r" "${1:Left} -right${3:-}> ${2:Right}\n" "Left -right-> Right" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/r" nil nil)
                       ("q" "queue ${1:Name} ${2:}{\n    $0\n}\n" "queue ... {...}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/q" nil nil)
                       ("public" "+ $0\n" "public bullet" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/public" nil nil)
                       ("protected" "# $0\n" "protected" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/protected" nil nil)
                       ("private" "- $0\n" "private" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/private" nil nil)
                       ("pprivate" "~ $0\n" "package private" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/pprivate" nil nil)
                       ("pkg" "package ${1:Name} <<${2:Rectangle}>> ${3:}{\n    $0\n}" "package ... {...}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/pkg" nil nil)
                       ("ns" "namespace ${1:Name} ${2:}{\n   $0\n}\n" "namespace ... {...}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/ns" nil nil)
                       ("note" "note ${1:}\n    $0\nend note" "note" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/note" nil nil)
                       ("node" "node ${1:Name} ${2:}{\n    $0\n}\n" "node ... {...}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/node" nil nil)
                       ("mm" "@startmindmap\n$0\n@endmindmap\n" "start and end a mindmap" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/mm" nil nil)
                       ("math" "<math>$0</math>\n" "math tag" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/math" nil nil)
                       ("map" "map ${1:Name} ${2:}{\n    $0\n}\n" "map ... {...}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/map" nil nil)
                       ("m" "{method} ${0:Name}\n" "method" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/m" nil nil)
                       ("latex" "<latex>$0</latex>\n" "latex tag" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/latex" nil nil)
                       ("l" "${1:Right} -left${3:-}> ${2:Left}\n" "Right -left-> Left" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/l" nil nil)
                       ("if" "if (${1:condition}) is (${2:Yes})\n   $0\nendif\n" "if (...) is (...) ... end" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/if" nil nil)
                       ("frame" "frame ${1:Name} ${2:}{\n    $0\n}\n\n" "frame" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/frame" nil nil)
                       ("fork" "fork\n    $0\nend fork\n" "fork" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/fork" nil nil)
                       ("folder" "folder ${1:Name} ${2:}{\n    $0\n}\n" "folder ... {...}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/folder" nil nil)
                       ("file" "file ${1:Name} ${2:}{\n    $0\n}\n" "file ... {...}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/file" nil nil)
                       ("fark" "fork again\n    $0\n" "fork again" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/fark" nil nil)
                       ("f" "{field} ${0:Name}" "{field}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/f" nil nil)
                       ("else" "else ${1:(No)}\n    $0\n" "else (...)" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/else" nil nil)
                       ("elif" "elseif (${1:condition}) is (${2:Yes})\n    $0\n" "elseif (...) is (...) ..." nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/elif" nil nil)
                       ("e" "entity ${1:Name} {\n    id : integer <<generated>>\n    --\n    $0\n}" "entity" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/e" nil nil)
                       ("db" "database ${1:Name} ${2:}{\n    $0\n}\n" "database ... {...}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/db" nil nil)
                       ("d" "${1:Up} -down${3:-}> ${2:Down}\n" "Up -down-> Down" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/d" nil nil)
                       ("comp" "component ${1:Name} ${2:}{\n    $0\n}\n" "component ... {...}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/comp" nil nil)
                       ("cls" "class ${1:Name} {\n    $0\n}\n" "class ... {...}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/cls" nil nil)
                       ("clr" "<color:$1>$0\n" "color tag" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/clr" nil nil)
                       ("cloud" "cloud ${1:Name} ${2:}{\n    $0\n}\n" "cloud ... {...}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/cloud" nil nil)
                       ("card" "card ${1:Name} ${2:}{\n    $0\n}\n" "card ... {...}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/card" nil nil)
                       ("art" "artifact ${1:Name} ${2:}{\n    $0\n}\n" "artifact ... {...}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/art" nil nil)
                       ("a" "{abstract} $0\n" "{abstract}" nil nil nil "/home/camus/.doom.d/snippets/plantuml-mode/a" nil nil)))


;;; Do not edit! File generated at Fri Mar  3 16:50:44 2023
