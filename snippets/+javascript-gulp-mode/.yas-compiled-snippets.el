;;; Compiled snippets and support files for `+javascript-gulp-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets '+javascript-gulp-mode
                     '(("ts-angular" "const util       = require(\"gulp-util\"),\n      browserify = require(\"browserify\"),\n      source     = require(\"vinyl-source-stream\"),\n      buffer     = require(\"vinyl-buffer\"),\n      uglify     = require(\"gulp-uglify\");\n\ngulp.task(\"ts\", () => {\n    return browserify({ entries: ${1:dir.source} + \"app.ts\", debug: true })\n        .plugin(tsify)\n        .external(\"@angular/platform-browser-dynamic\")\n        .bundle().on(\"error\", err => { console.error(err.toString()); })\n        .pipe(source(\"app.js\"))\n        .pipe(buffer())\n        .pipe(util.env.pack ? uglify() : util.noop())\n        .pipe(gulp.dest(${2:dir.build} + \"/app/\"));\n});" "Typescript (w/ Angular) compilation task" nil nil nil "/home/camus/.doom.d/snippets/+javascript-gulp-mode/ts-angular" nil nil)
                       ("ts" "const util       = require(\"gulp-util\"),\n      browserify = require(\"browserify\"),\n      source     = require(\"vinyl-source-stream\"),\n      buffer     = require(\"vinyl-buffer\"),\n      uglify     = require(\"gulp-uglify\");\n\ngulp.task(\"ts\", () => {\n    return browserify({ entries: ${1:dir.source} + \"app.ts\", debug: true })\n        .plugin(tsify)\n        .bundle().on(\"error\", err => { console.error(err.toString()); })\n        .pipe(source(\"app.js\"))\n        .pipe(buffer())\n        .pipe(util.env.pack ? uglify() : util.noop())\n        .pipe(gulp.dest(${2:dir.build} + \"/app/\"));\n});" "Typescript compilation task" nil nil nil "/home/camus/.doom.d/snippets/+javascript-gulp-mode/ts" nil nil)
                       ("task" "gulp.task('${1:task-name}', ($2) => {\n    `%`$0\n});" "Gulp task" nil nil nil "/home/camus/.doom.d/snippets/+javascript-gulp-mode/task" nil nil)
                       ("tape" "const tape   = require(\"gulp-tape\"),\n      faucet = require(\"faucet\");\n\ngulp.task(\"test\", () => {\n    return gulp.src(\"test/**/test_*.js\")\n        .pipe(tape({reporter: faucet()}))\n});" "Tape test-runner task" nil nil nil "/home/camus/.doom.d/snippets/+javascript-gulp-mode/tape" nil nil)
                       ("sass" "const sass    = require(\"gulp-sass\"),\n      bourbon = require(\"node-bourbon\").includePaths;\n\ngulp.task(\"sass\", () => {\n    const dest = ${1:dir.build} + \"/css\";\n\n    return gulp.src(\"stylesheets/**.scss\", {cwd: ${2:dir.source}})\n        .pipe(changed(dest, {extension: \".scss\"}))\n        .pipe(sass({\n                includePaths: bourbon,\n                outputStyle: \"compressed\",\n                sourcemap: true\n            }).on(\"error\", sass.logError))\n        .pipe(gulp.dest(dest))\n        .pipe(brsync.stream());\n});" "SASS compilation task" nil nil nil "/home/camus/.doom.d/snippets/+javascript-gulp-mode/sass" nil nil)
                       ("pug" "const pug     = require(\"gulp-pug\"),\n      changed = require(\"gulp-changed\");\n\ngulp.task(\"pug\", () => {\n    let locals = {locals: {release: util.env.release}};\n\n    return gulp.src(\"views/**/*.pug\", {cwd: ${1:dir.source}, base: $1})\n        .pipe(changed(${2:dir.build}, {extension: \".pug\"}))\n        .pipe(pug(locals))\n        .pipe(gulp.dest(dir.build));\n});" "Pug compilation task" nil nil nil "/home/camus/.doom.d/snippets/+javascript-gulp-mode/pug" nil nil)
                       ("es6" "const util       = require(\"gulp-util\"),\n      uglify     = require(\"gulp-uglify\"),\n      browserify = require(\"browserify\"),\n      source     = require(\"vinyl-source-stream\"),\n      buffer     = require(\"vinyl-buffer\");\n\ngulp.task(\"js\", () => {\n    return browserify({\n            entries: dir.source + \"main.js\",\n            debug: !util.env.pack,\n            detectGlobals: false,\n            paths: [dir.source]\n        })\n        .transform(\"babelify\", {presets: [\"es2015\"], ignore: util.env.pack ? null : /.*/})\n        .bundle()\n        .pipe(source(\"main.js\"))\n        .pipe(buffer())\n        .pipe(util.env.pack ? uglify({mangle: {keep_fnames: true}}) : util.noop())\n        .pipe(gulp.dest(dir.build));\n});" "ES6+Babel compilation task" nil nil nil "/home/camus/.doom.d/snippets/+javascript-gulp-mode/es6" nil nil)
                       ("default" "gulp.task('default', $0);" "Default gulp task" nil nil nil "/home/camus/.doom.d/snippets/+javascript-gulp-mode/default" nil nil)
                       ("browsersync" "const brsync = require(\"browser-sync\").create();\n\ngulp.task(\"serve\", () => {\n    brsync.init({ server: { baseDir: \"./\" } });\n\n    // TODO add browserSync\n    gulp.watch(\"**/*.pug\", [\"pug\"]);\n    gulp.watch(\"sass/**/*.scss\", [\"sass\"]);\n    gulp.watch(\"**/*.html\").on('change', brsync.reload);\n});" "Browsersync task" nil nil nil "/home/camus/.doom.d/snippets/+javascript-gulp-mode/browsersync" nil nil)))


;;; Do not edit! File generated at Mon Mar 20 17:06:14 2023
